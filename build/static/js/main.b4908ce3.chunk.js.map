{"version":3,"sources":["Services/AuthService.js","context/SearchContext.js","context/SidebarContext.js","components/ThemedSuspense.js","components/AccessibleNavigationAnnouncer.js","App.js","serviceWorker.js","index.js","context/AuthContext.js"],"names":["login","user","fetch","method","body","JSON","stringify","headers","then","res","json","data","register","logout","isAuthenticated","status","username","role","SearchContext","createContext","SearchProvider","props","useState","search","setSearch","Provider","value","children","SidebarContext","React","SidebarProvider","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","useMemo","ThemedSuspense","className","AccessibleNavigationAnnouncer","message","setMessage","location","useLocation","useEffect","pathname","slice","setTimeout","aria-live","aria-atomic","Layout","lazy","Login","CreateAccount","ForgotPassword","App","useContext","AuthContext","setIsAuthenticated","setUser","exact","from","to","path","component","Boolean","window","hostname","match","ReactDOM","render","fallback","usePreferences","document","getElementById","isLoaded","setIsLoaded","AuthService"],"mappings":"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","file":"static/js/main.b4908ce3.chunk.js","sourcesContent":["export default {\r\n  login: (user) => {\r\n    return fetch(\"/user/login\", {\r\n      method: \"post\",\r\n      body: JSON.stringify(user),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => data);\r\n  },\r\n  register: (user) => {\r\n    return fetch(\"/user/register\", {\r\n      method: \"post\",\r\n      body: JSON.stringify(user),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => data);\r\n  },\r\n  logout: () => {\r\n    return fetch(\"/user/logout\")\r\n      .then((res) => res.json())\r\n      .then((data) => data);\r\n  },\r\n  isAuthenticated: () => {\r\n    return fetch(\"/user/authenticated\").then((res) => {\r\n      if (res.status !== 401) {\r\n        return res.json().then((data) => data);\r\n      } else {\r\n        return { isAuthenticated: false, user: { username: \"\", role: \"\" } };\r\n      }\r\n    });\r\n  },\r\n};\r\n","import { PromiseProvider } from \"mongoose\";\r\nimport React, { createContext, useState, useEffect } from \"react\";\r\n\r\nexport const SearchContext = createContext();\r\n\r\nexport const SearchProvider = (props) => {\r\n  const [search, setSearch] = useState([]);\r\n  return (\r\n    <SearchContext.Provider value={[search, setSearch]}>\r\n      {props.children}\r\n    </SearchContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useMemo } from 'react'\r\n\r\n// create context\r\nexport const SidebarContext = React.createContext()\r\n\r\nexport const SidebarProvider = ({ children }) => {\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\r\n\r\n  function toggleSidebar() {\r\n    setIsSidebarOpen(!isSidebarOpen)\r\n  }\r\n\r\n  function closeSidebar() {\r\n    setIsSidebarOpen(false)\r\n  }\r\n\r\n  const value = useMemo(\r\n    () => ({\r\n      isSidebarOpen,\r\n      toggleSidebar,\r\n      closeSidebar,\r\n    }),\r\n    [isSidebarOpen]\r\n  )\r\n\r\n  return <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>\r\n}\r\n","import React from 'react'\r\n\r\nfunction ThemedSuspense() {\r\n  return (\r\n    <div className=\"w-full h-screen p-6 text-lg font-medium text-gray-600 dark:text-gray-400 dark:bg-gray-900\">\r\n      Loading...\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ThemedSuspense\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nfunction AccessibleNavigationAnnouncer() {\r\n  const [message, setMessage] = useState('')\r\n  const location = useLocation()\r\n\r\n  useEffect(() => {\r\n    // ignore the /\r\n    if (location.pathname.slice(1)) {\r\n      // make sure navigation has occurred and screen reader is ready\r\n      setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)\r\n    } else {\r\n      setMessage('')\r\n    }\r\n  }, [location])\r\n\r\n  return (\r\n    <span className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\r\n      {message}\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default AccessibleNavigationAnnouncer\r\n","import React, { lazy, useContext, useState } from \"react\";\r\nimport { AuthContext } from \"./context/AuthContext\";\r\nimport { SearchProvider } from \"./context/SearchContext\";\r\nimport AuthService from \"./Services/AuthService\";\r\n// import Message from \"./components/Message\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport AccessibleNavigationAnnouncer from \"./components/AccessibleNavigationAnnouncer\";\r\n\r\nconst Layout = lazy(() => import(\"./containers/Layout\"));\r\nconst Login = lazy(() => import(\"./pages/Login\"));\r\nconst CreateAccount = lazy(() => import(\"./pages/CreateAccount\"));\r\nconst ForgotPassword = lazy(() => import(\"./pages/ForgotPassword\"));\r\n\r\nfunction App() {\r\n  // const { user, setUser, isAuthenticated, setIsAuthenticated } = useContext(\r\n  //   AuthContext\r\n  // );\r\n  // console.log(user);\r\n  // console.log(isAuthenticated);\r\n  const { isAuthenticated, user, setIsAuthenticated, setUser } = useContext(\r\n    AuthContext\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        <AccessibleNavigationAnnouncer />\r\n        <Switch>\r\n          <Redirect exact from=\"/\" to=\"/login\" />\r\n          {/* <Redirect exact from=\"/\" to=\"/app\" /> */}\r\n          <Route path=\"/login\" component={Login} />\r\n          <Route path=\"/create-account\" component={CreateAccount} />\r\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\r\n\r\n          {/* Place new routes over this */}\r\n          <Route path=\"/app\" component={Layout} />\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./assets/css/tailwind.output.css\";\r\nimport App from \"./App\";\r\nimport { SidebarProvider } from \"./context/SidebarContext\";\r\nimport ThemedSuspense from \"./components/ThemedSuspense\";\r\nimport { Windmill } from \"@windmill/react-ui\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport AuthProvider from \"./context/AuthContext\";\r\nimport { SearchProvider } from \"./context/SearchContext\";\r\n\r\n// if (process.env.NODE_ENV !== 'production') {\r\n//   const axe = require('react-axe')\r\n//   axe(React, ReactDOM, 1000)\r\n// }\r\n\r\nReactDOM.render(\r\n  <SearchProvider>\r\n    <AuthProvider>\r\n      <SidebarProvider>\r\n        <Suspense fallback={<ThemedSuspense />}>\r\n          <Windmill usePreferences>\r\n            <App />\r\n          </Windmill>\r\n        </Suspense>\r\n      </SidebarProvider>\r\n    </AuthProvider>\r\n  </SearchProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.register()\r\n","import React, { createContext, useState, useEffect } from \"react\";\r\nimport AuthService from \"../Services/AuthService\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport default ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    AuthService.isAuthenticated().then((data) => {\r\n      setUser(data.user);\r\n      setIsAuthenticated(data.isAuthenticated);\r\n      setIsLoaded(true);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {!isLoaded ? (\r\n        <h1>Loading</h1>\r\n      ) : (\r\n        <AuthContext.Provider\r\n          value={{ user, setUser, isAuthenticated, setIsAuthenticated }}\r\n        >\r\n          {children}\r\n        </AuthContext.Provider>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"sourceRoot":""}